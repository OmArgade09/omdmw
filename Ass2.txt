import pandas as pd
df=pd.read_csv("C:/Users/DELL/Desktop/TY-2/DMW/Heart.csv")
print(df)

df.dtypes

import numpy as np
numeric_df = df.select_dtypes(include=[np.number])
print(numeric_df)

std_dev = numeric_df.std()
print('Standered Deviation : ', std_dev)

var = numeric_df.var()
print('Varience : ', var)

covariance_matrix = numeric_df.cov()
correlation_matrix = numeric_df.corr()
print("\nCovariance Matrix:\n", covariance_matrix)
print("\nCorrelation Matrix:\n", correlation_matrix)

independent_features = np.linalg.matrix_rank(numeric_df.corr())
print("\nNumber of independent features:", independent_features)

unwanted_features = set()
for i in range(len(correlation_matrix.columns)):
    for j in range(i):
        if abs(correlation_matrix.iloc[i, j]) > 0.8:
            colname = correlation_matrix.columns[i]
            unwanted_features.add(colname)

print("\nd) Unwanted features:", unwanted_features)

# e) Perform data discretization using equi-frequency binning method on the age attribute
num_bins = 5  # Choose the number of bins as needed
df['age_bins'] = pd.qcut(df['Age'], q=num_bins, labels=False)

import matplotlib.pyplot as plt
plt.figure(figsize=(5, 3))
plt.hist(df['Age'], bins=num_bins, edgecolor='black', alpha=0.7)
plt.title('Equi-Frequency Binning for Age Attribute')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

from sklearn.preprocessing import MinMaxScaler, StandardScaler

# f) Normalize RestBP, chol, and MaxHR attributes using different normalization techniques
attributes_to_normalize = ['RestBP', 'Chol', 'MaxHR']

# Min-Max normalization
min_max_scaler = MinMaxScaler()
df_min_max_normalized = df.copy()
df_min_max_normalized[attributes_to_normalize] = min_max_scaler.fit_transform(df[attributes_to_normalize])
df_min_max_normalized[attributes_to_normalize]

# Z-score normalization
z_score_scaler = StandardScaler()
df_z_score_normalized = df.copy()
df_z_score_normalized[attributes_to_normalize] = z_score_scaler.fit_transform(df[attributes_to_normalize])
df_z_score_normalized[attributes_to_normalize]

decimal_scaling_factor = 10 ** (len(str(int(df[attributes_to_normalize].abs().max().max()))) - 1)
df_decimal_scaled = df.copy()
df_decimal_scaled[attributes_to_normalize] = df[attributes_to_normalize] / decimal_scaling_factor
df_decimal_scaled[attributes_to_normalize]




